syntax = "proto3";

option objc_class_prefix = "Tachyon";

package tachyon;

// This is what's actually used in the websocket
service WsMessaging {
  rpc Client (ClientMessage) returns (ServerMessage) {}
  rpc Server (ServerMessage) returns (ClientMessage) {}
}


service AccountService {
  rpc AccountMigration (AccountMigrationRequest) returns (AccountMigrationResponse) {}
  rpc WhoisMyself (MyselfRequest) returns (MyselfResponse) {}
  rpc ListUsers (UserListRequest) returns (UserListResponse) {}
}

service LobbyService {
  rpc ListLobbies (LobbyListRequest) returns (LobbyListResponse) {}
}

// service LobbyHostService {
  
// }

// WS encoding messages
// Client requesting something from the server
message ClientMessage {
  int64 id = 1;
  oneof object {
    // Generics
    Empty empty = 80;
    Failure failure = 81;
    
    // Auth
    AccountMigrationRequest account_migration_request = 100;
    MyselfRequest myself_request = 101;
    UserListRequest user_list_request = 102;
    
    LobbyListRequest lobby_list_request = 120;
  }
}

message ServerMessage {
  int64 id = 1;
  oneof object {
    // Generics
    Empty empty = 80;
    Failure failure = 81;
    
    // Auth
    AccountMigrationResponse account_migration_response = 100;
    MyselfResponse myself_response = 101;
    UserListResponse user_list_response = 102;
    
    LobbyListResponse lobby_list_response = 120;
  }
}

// Generic response messages
message Failure {
  string action = 1;
  string reason = 2;
}

// Empty response
message Empty {
  
}

// Authentication messages
message TokenRequest {
  string email = 1;
  string password = 2;
}

message TokenResponse {
  string token = 1;
}

message LoginRequest {
  string token = 1;
  string app_name = 2;
  string app_version = 3;
  string app_hash = 4;
}

message LoginResponse {
  User user = 1;
}

message VerifyRequest {
  string token = 1;
  string code = 2;
}

message VerifyResponse {
  User user = 1;
}

message DisconnectRequest {
  string reason = 1;
}

message RegistrationRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}

message RegistrationResponse {
  string token = 1;
}

message AccountMigrationRequest {
  string username = 1;
  string password = 2;
  string desired_email = 3;
}

message AccountMigrationResponse {
  string token = 1;
}


message User {
  int32 id = 1;
  string name = 2;
  bool bot = 3;
  int32 clan_id = 4;
  map<string, string> icons = 5;
}

// Same as a user but contains privilaged information
message PrivateUser {
  int32 id = 1;
  string name = 2;
  bool bot = 3;
  int32 clan_id = 4;
  map<string, string> icons = 5;
  
  repeated string permissions = 9;
  repeated int32 friends = 10;
  repeated int32 friend_requests = 11;// Users requesting this user to be their friend
  repeated int32 ignores = 12;
}

message MyselfRequest {
  
}

message MyselfResponse {
  // Client client = 1;
  PrivateUser user = 2;
}

message UserListRequest {
  repeated int32 id_list = 1;
}

message UserListResponse {
  repeated User user_list = 1;
}


message LobbyListRequest {
  repeated int32 id_list = 1;
  LobbyStatus locked = 2;
  bool passworded = 3;
}

message LobbyListResponse {
  repeated Lobby lobby_list = 1;
}

// // This represents a user who is logged in. A user who is logged out will not have a client object.
// message Client {
//   int32 id = 1;
//   bool in_game = 2;
//   bool away = 3;
  
//   // Game lobby related attributes
//   bool ready = 4;
//   int32 player_number = 5;
//   string team_colour = 6;
//   bool player = 7;
//   sint32 bonus = 8;
//   map<string, int32> sync = 9;// key represents the item with a value between 0-100 showing the percentage downloaded
  
//   string faction = 10;
//   int32 lobby_id = 11;
  
//   // Other
//   int32 party_id = 12;
//   string clan_tag = 13;
//   bool muted = 14;
// }

enum LobbyStatus {
  LOBBY_UNLOCKED = 0;
  LOBBY_FRIENDS = 1;
  LOBBY_WHITELIST = 2;
  LOBBY_LOCKED = 3;
}

message StartArea {
  string type = 1;
  map<string, sint32> values = 2;
}

message Lobby {
  int32 id = 1;
  string name = 2;
  int32 founder_id = 3;
  bool passworded = 4;
  LobbyStatus locked = 5;
  
  string engine_name = 6;
  string engine_version = 7;
  
  repeated int32 players = 8;
  repeated int32 spectators = 9;
  
  // Bots will go here once we work out how best to transmit them
  // repeated int32 bots = 10;// Ummm, they're not userids, this is wrong
  
  string ip = 11;
  map<string, string> settings = 12;
  map<int32, StartArea> start_areas = 13;
  string map_name = 14;
  string map_hash = 15;
  bool public = 16;
}

// message Queue {
//   int32 id = 1;
//   string name = 2;
//   int32 team_size = 3;
//   // conditions goes here, not sure of format
//   map<string, string> settings = 5;// Not sure we want to have queue settings sent out or not
//   repeated string map_list = 6;
// }

// message Party {
//   int32 id = 1;
//   int32 leader_id = 2;
//   repeated int32 members = 3;
//   repeated int32 invites = 4;
// }
